AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  This stack automatically runs `fastlane spaceauth` (including the 2FA SMS) and stores the session cookie in Secrets Manager for use in CI/CD.

Parameters:
  Spaceship2FaSmsDefaultPhoneNumber:
    Type: String
    Description: Phone number to receive 2FA code (the AWS Pinpoint phone number)
    Default: "+1 (787) 493-0633"
  SnsTopicArn:
    Type: String
    Description: AWS SNS topic ARN that receives 2FA SMS
    Default: "arn:aws:sns:eu-west-1:501431420968:APPLE_2FA_SMS_CODES"
  FastlaneUser:
    Type: String
    Description: Apple ID for Fastlane
    Default: "dev-ios@bfansports.com"
  FastlanePassword:
    Type: String
    Description: Apple ID password for Fastlane
    NoEcho: true
  SecretsManagerSecretId:
    Type: String
    Description: AWS Secrets Manager secret ID to store the FASTLANE_SESSION
    Default: "arn:aws:secretsmanager:eu-west-1:501431420968:secret:IOSEnvironment-eotAA1"
  KmsKeyIdForSecretsManager:
    Type: String
    Description: AWS KMS key ID for Secrets Manager
    Default: "arn:aws:kms:eu-west-1:501431420968:key/64b87c32-49f8-48e2-864a-2da94059448c"
  DevAccountId:
    Type: String
    Description: AWS account ID for the dev environment
    Default: "441276146445"
  QaAccountId:
    Type: String
    Description: AWS account ID for the QA environment
    Default: "644562626802"
  ProdAccountId:
    Type: String
    Description: AWS account ID for the prod environment
    Default: "501431420968"

Conditions:
  IsNotDevAccount: !Not [!Equals [!Ref DevAccountId, !Ref AWS::AccountId]]
  IsNotQaAccount: !Not [!Equals [!Ref QaAccountId, !Ref AWS::AccountId]]
  IsNotProdAccount: !Not [!Equals [!Ref ProdAccountId, !Ref AWS::AccountId]]

Resources:
  # Define the SQS queue
  SqsQueueForApple2FaSms:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: SqsQueueForApple2FaSms
      DelaySeconds: 0
      MessageRetentionPeriod: 120
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 0
      SqsManagedSseEnabled: true

  # Policy allows SNS to publish to this SQS queue
  SnsToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "Allow SNS publish to SQS"
            Effect: Allow
            Principal:
              Service: "sns.amazonaws.com"
            Resource: !GetAtt SqsQueueForApple2FaSms.Arn
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SnsTopicArn
      Queues: [!Ref SqsQueueForApple2FaSms]

  # Subscribes the SQS queue to the SNS topic
  SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt SqsQueueForApple2FaSms.Arn
      TopicArn: !Ref SnsTopicArn
      RawMessageDelivery: true # Save some bytes

  # Custom IAM Role for Lambda FastlaneSpaceauth
  FastlaneSpaceauthFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FastlaneSpaceauthFunctionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/FastlaneSpaceauthFunction:*
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt SqsQueueForApple2FaSms.Arn
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                Resource: !Ref SecretsManagerSecretId
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !Ref KmsKeyIdForSecretsManager


  # Custom IAM Role for Lambda Fastlane2FaSmsLogger
  Fastlane2FaSmsLoggerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Fastlane2FaSmsLoggerFunctionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Fastlane2FaSmsLoggerFunction:*

  FastlaneSpaceauthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: FastlaneSpaceauth
      Description: This function runs Fastlane's spaceauth command to refresh the FASTLANE_SESSION in Secrets Manager
      CodeUri: auto-fastlane-spaceauth/
      Handler: app.lambda_handler
      Runtime: ruby3.3
      Timeout: 150
      Architectures:
        - arm64
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref SqsQueueForApple2FaSms
          SPACESHIP_2FA_SMS_DEFAULT_PHONE_NUMBER: !Ref Spaceship2FaSmsDefaultPhoneNumber
          FASTLANE_USER: !Ref FastlaneUser
          FASTLANE_PASSWORD: !Ref FastlanePassword
          SECRETS_MANAGER_SECRET_ID: !Ref SecretsManagerSecretId
      Role: !GetAtt FastlaneSpaceauthFunctionRole.Arn
      Events:
        SpaceauthSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(15 minutes)
            Name: FastlaneSpaceauthSchedule
            Description: Triggers the FastlaneSpaceauthFunction lambda every 15 minutes

  LogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: FastlaneSpaceauthFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${FastlaneSpaceauthFunction}
      RetentionInDays: 7

  FastlaneSpaceauthRefreshingSessionFilter:
    Type: AWS::Logs::MetricFilter
    DependsOn: LogGroup
    Properties:
      # From https://github.com/fastlane/fastlane/blob/master/spaceship/lib/spaceship/client.rb#L442
      FilterPattern: '"Session loaded from environment variable is not valid. Continuing with normal login."'
      LogGroupName: !Sub /aws/lambda/${FastlaneSpaceauthFunction}
      MetricTransformations:
        - MetricName: RefreshingSession
          MetricNamespace: FastlaneSpaceauth
          MetricValue: '1'

  FastlaneTooManyVerificationCodesSentErrorFilter:
    Type: AWS::Logs::MetricFilter
    DependsOn: LogGroup
    Properties:
      # From https://github.com/fastlane/fastlane/blob/master/spaceship/lib/spaceship/two_step_or_factor_client.rb#L29
      FilterPattern: '"Too many verification codes have been sent."'
      LogGroupName: !Sub /aws/lambda/${FastlaneSpaceauthFunction}
      MetricTransformations:
        - MetricName: FastlaneTooManyVerificationCodesSentError
          MetricNamespace: FastlaneSpaceauth
          MetricValue: '1'

  FastlaneTooManyVerificationCodesSentErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: FastlaneTooManyVerificationCodesSentErrorFilter
    Properties:
      ActionsEnabled: true
      AlarmActions: [!ImportValue 'EmailNotificationTopic']
      AlarmDescription: Alarm triggered when the Pinpoint 2FA SMS limit is reached
      AlarmName: FastlaneTooManyVerificationCodesSentErrorAlarm
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: FastlaneTooManyVerificationCodesSentError
      Namespace: FastlaneSpaceauth
      Period: 300
      Statistic: Sum
      Threshold: 1
      Unit: None
      TreatMissingData: notBreaching

  # In case Apple blocks the phone number, we need to keep every SMS message.
  # This lambda will log every SMS message received into CloudWatch Logs.
  # That way, we can manually get the latest SMS code from CloudWatch Logs,
  # and enter the last code received into the Apple website to unblock the number.
  Fastlane2FaSmsLoggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Fastlane2FaSmsLogger
      Description: This function logs every Fastlane 2FA SMS message received into CloudWatch Logs
      InlineCode: |
          def lambda_handler(event, context):
              print(event)
      Handler: index.lambda_handler
      Runtime: python3.12
      Timeout: 3
      MemorySize: 128 # Smallest possible
      Architectures:
        - arm64
      Role: !GetAtt Fastlane2FaSmsLoggerFunctionRole.Arn

  # Log group that keeps the 2FA SMS history
  LogGroupForFastlane2FaSmsLoggerFunction:
    Type: AWS::Logs::LogGroup
    DependsOn: Fastlane2FaSmsLoggerFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${Fastlane2FaSmsLoggerFunction}
      RetentionInDays: 7

  # Provide permission for SNS to invoke the logger Lambda function
  SnsPermissionForFastlane2FaSmsLoggerFunction:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Fastlane2FaSmsLoggerFunction
      Principal: sns.amazonaws.com

  # SNS Subscription
  SnsSubscriptionForFastlane2FaSmsLoggerFunction:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt Fastlane2FaSmsLoggerFunction.Arn
      Protocol: lambda
      TopicArn: !Ref SnsTopicArn

  # The refresh lambda should be accessible cross-account
  # That way we can force trigger a refresh of the FASTLANE_SESSION from our CI/CD pipeline
  FastlaneSpaceauthFunctionCrossAccountPermissionDev:
    Type: AWS::Lambda::Permission
    Condition: IsNotDevAccount # No need to give cross-account permissions to the current account
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FastlaneSpaceauthFunction
      Principal: !Ref DevAccountId

  FastlaneSpaceauthFunctionCrossAccountPermissionQA:
    Type: AWS::Lambda::Permission
    Condition: IsNotQaAccount # No need to give cross-account permissions to the current account
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FastlaneSpaceauthFunction
      Principal: !Ref QaAccountId

  FastlaneSpaceauthFunctionCrossAccountPermissionProd:
    Type: AWS::Lambda::Permission
    Condition: IsNotProdAccount # No need to give cross-account permissions to the current account
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FastlaneSpaceauthFunction
      Principal: !Ref ProdAccountId

  # Managed Policy to attach to the CI/CD Role/User/Group
  InvokeFastlaneSpaceauthLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: InvokeFastlaneSpaceauthLambdaPolicy
      Description: Allows to invoke the FastlaneSpaceauth lambda to force refresh the Fastlane session.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt FastlaneSpaceauthFunction.Arn
